# PIA ETAPA 1 PROGRAMACION BASICA
# API DE LA CALIDAD DEL AIRE DE LA ZONA METROPOLITANA DE MTY
# Librerias que hay que descargar: matplotlib, requests

def generar_grafico_de_barras(info,indicador):
    # generar listado de etiquetas (ciudades)
    import matplotlib.pyplot as plt 
    
    # crear la lista de etiqueas, nombres de las ciudades
    
    etiquetas = []
    for ciudad in info:
        city = ciudad["ciudad"]
        etiquetas.append(city)
    valores = []
    
    # crear la lista de valores
    if indicador == 'aqi':
        for ciudad in info:
            val = ciudad["data"]["data"]["aqi"]
            valores.append(val)
    else:
        for ciudad in info:
            if indicador in ciudad["data"]["data"]["iaqi"].keys():
                val = ciudad["data"]["data"]["iaqi"][indicador]["v"]
            else:
                val = 0
            valores.append(val)
    plt.figure(figsize=(12,6))
    plt.bar(etiquetas, valores, color='orange') 
    plt.title("Indice de calidad del aire por ciudad en el AMM")
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()
    
def generar_grafico_de_barras(info,indicador):
    # generar listado de etiquetas (ciudades)
    import matplotlib.pyplot as plt 
    
    # crear la lista de etiqueas, nombres de las ciudades
    
    etiquetas = []
    for ciudad in info:
        city = ciudad["ciudad"]
        etiquetas.append(city)
    valores = []
    
    # crear la lista de valores
    if indicador == 'aqi':
        for ciudad in info:
            val = ciudad["data"]["data"]["aqi"]
            valores.append(val)
    else:
        for ciudad in info:
            if indicador in ciudad["data"]["data"]["iaqi"].keys():
                val = ciudad["data"]["data"]["iaqi"][indicador]["v"]
            else:
                val = 0
            valores.append(val)
    plt.figure(figsize=(12,6))
    plt.bar(etiquetas, valores, color='orange') 
    plt.title("Indice de calidad del aire por ciudad en el AMM")
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

def buscar_aqi(city_name):
    import requests
    # Leer el token
    with open(r"C:\Users\juang\Documents\FCFM\2do Semestre\Programacion Basica\PIA\token_aqicn.txt", "r") as f:
        token = f.read().strip()

    url = f"https://api.waqi.info/feed/{city_name}/?token={token}"
    respuesta = requests.get(url)
    data = respuesta.json()
    if data['data'] != 'Unknown station':
        udi = data['data']['idx']
    else: 
        udi = None
        print("Estacion desconocida")
    
    registro = {"ciudad": city_name, "udi": udi, "data": data}
    return registro

def clasificar_aqi(aqi):
    if aqi < 50:
        return "- la calidad del aire es buena"
    elif 51 < aqi <= 100:
        return "- la calidad del aire es moderada"
    elif 100 < aqi <= 150:
        return "- la calidad del aire es no saludable para grupos sensibles"
    elif 150 < aqi <= 200:
        return "- la calidad del aire no es saludable"
    elif 200 < aqi <= 300:
        return "- la calidad del aire no es nada saludable"
    else:
        return "- la calidad del aire es peligrosa"
    return

def mostrar_aqi_total(info):
    import statistics 
    moda = []
    datos = []
    print("aqi")
    for ciudad in info:
        print(f"{ciudad['data']['data']['aqi']}\t{ciudad['ciudad']} {clasificar_aqi(ciudad['data']['data']['aqi'])}")
        datos.append(ciudad['data']['data']['aqi'])
    moda.append(clasificar_aqi(ciudad['data']['data']['aqi']))
    
    print(f"Promedio: {statistics.mean(datos)}")
    print(f"Moda: {statistics.mode(moda)}")
    print(f"Mediana: {statistics.median(datos)}")
    indicador = 'aqi'
    generar_grafico_de_barras(info,indicador)
    
def mostrar_por_contaminante(info):
    while True:
        cont = int(input(f"Que contaminante desea buscar en el AMM:\n1. co: Mon贸xido de carbono.\n2. no2: Di贸xido de nitr贸geno.\n3. o3: Ozono.\n4. pm10, pm25: Material particulado.\n5. so2: Di贸xido de azufre.\n6. Terminar de buscar\nSeleccionaste: "))
        if cont == 1:
            cont = 'co'
        elif cont == 2:
            cont = 'no2'
        elif cont == 3:
            cont = 'o3'
        elif cont == 4:
            cont = 'pm10'
        elif cont == 5:
            cont = 'pm25'
        elif cont == 5:
            cont = 'so2'
        elif cont == 6:
            return
        else:
            print("No existe esa opcion")
        
        print("co:")
        for ciudad in info:
            if cont in ciudad['data']['data']['iaqi']:
                print(f"{ciudad['data']['data']['iaqi'][cont]['v']}\t{ciudad['ciudad']}")
            else:
                print(f"Dato no disponible en {ciudad['ciudad']}")
        generar_grafico_de_barras(info,cont)

def main(info):
    
    info = []
    ciudades = ['santa-catarina','monterrey','guadalupe','apodaca','juarez','cadereyta','garcia','san-nicolas-de-los-garza','general-escobedo','san-pedro-garza-garcia']
    
    while True:
        
        op = int(input("Ingrese alguna opcion\n1. Generar info del AMM\n2. Guardar la informacion\n3. Mostrar informacion sobre la calidad del aire\n4. Buscar informacion por contaminante\n5. Ver pronosticos\n6. Terminar\nSeleccionado: "))
        
        # busca las ciudades ingresadas en la variable ciudades
        if op == 1:
            for ciudad in ciudades:
                datos = buscar_aqi(ciudad)
                info.append(datos)
        
        # guarda la informacion de todas las ciudades 
        elif op == 2:
            # guardar la informacion en crudo
            info_amm = open(r"C:\Users\juang\Documents\FCFM\2do Semestre\Programacion Basica\PIA\info_amm.txt", "w")
            info_amm.write(str(info))
            info_amm.close()
        
        # Mostrar informacion sobre la calidad del aire
        elif op == 3:
            mostrar_aqi_total(info)
        
        # Buscar informacion por contaminante
        elif op == 4:
            mostrar_por_contaminante(info)
        
        # Dar informacion y graficar el pronostico de las particulas pm10 y pm25
        elif op == 5:
            print("hola")
        # cerrar el programa
        else:
            break
            
main()
